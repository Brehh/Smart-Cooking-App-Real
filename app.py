import streamlit as st
import google.generativeai as genai
import textwrap
import datetime
import os
import time
import uuid

# --- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Page Configuration ---
st.set_page_config(
    page_title="üçΩÔ∏è Smart Cooking App üòé",
    page_icon="üç≥",
    layout="wide",
    initial_sidebar_state="expanded",
)

# --- File-based persistence ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Visitor Count ‡πÅ‡∏•‡∏∞ Active Users ---
COUNTER_FILE = "visitor_count.txt"
ACTIVE_USERS_FILE = "active_users.txt"
ACTIVE_TIMEOUT = 20  # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡∏ô‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô active

def get_visitor_count():
    try:
        with open(COUNTER_FILE, "r") as f:
            content = f.read().strip()
            return int(content) if content else 0
    except FileNotFoundError:
        with open(COUNTER_FILE, "w") as f:
            f.write("0")
        return 0

def increment_visitor_count():
    count = get_visitor_count() + 1
    with open(COUNTER_FILE, "w") as f:
        f.write(str(count))
    return count

def get_active_users():
    current_time = time.time()
    active_users = {}
    try:
        with open(ACTIVE_USERS_FILE, "r") as f:
            for line in f:
                line = line.strip()
                if not line or "," not in line:
                    continue
                user_id, last_seen = line.split(",")
                if current_time - float(last_seen) <= ACTIVE_TIMEOUT:
                    active_users[user_id] = last_seen
    except FileNotFoundError:
        pass

    with open(ACTIVE_USERS_FILE, "w") as f:
        for user_id, last_seen in active_users.items():
            f.write(f"{user_id},{last_seen}\n")
    return len(active_users)

def update_active_user():
    if "session_id" not in st.session_state:
        st.session_state.session_id = str(uuid.uuid4())
    user_id = st.session_state.session_id
    current_time = time.time()
    active_users = {}
    try:
        with open(ACTIVE_USERS_FILE, "r") as f:
            for line in f:
                line = line.strip()
                if not line or "," not in line:
                    continue
                parts = line.split(",")
                if len(parts) != 2:
                    continue
                existing_user_id, last_seen = parts
                active_users[existing_user_id] = last_seen
    except FileNotFoundError:
        pass
    active_users[user_id] = str(current_time)
    with open(ACTIVE_USERS_FILE, "w") as f:
        for uid, last_seen in active_users.items():
            f.write(f"{uid},{last_seen}\n")

# --- API Key Setup ---
API_KEYS = st.secrets["API_KEYS"]

# --- Helper Functions ---
def call_gemini_api(prompt):
    for api_key in API_KEYS:
        try:
            genai.configure(api_key=api_key)
            model = genai.GenerativeModel("gemini-2.0-flash")
            response = model.generate_content(prompt)
            return response.text.strip()
        except Exception as e:
            error_message = str(e)
            if "insufficient_quota" in error_message or "Quota exceeded" in error_message:
                continue
            else:
                return f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error_message}"
    return "‚ö†Ô∏è API ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏°‡∏î‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"

def process_menus(response_text):
    menu_list = []
    separators = ["üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà", "\n- ", "\n‚Ä¢ ", "\n‚Äî ", "- ", "‚Ä¢ "]
    for sep in separators:
        if sep in response_text:
            menu_list = response_text.split(sep)
            break
    else:
        return [response_text.strip()]
    menu_list = [menu.strip() for menu in menu_list if menu.strip()]
    return menu_list

def format_menu_text(menu):
    # ‡πÅ‡∏õ‡∏•‡∏á **bold** ‡∏´‡∏£‡∏∑‡∏≠ *bold* ‡πÄ‡∏õ‡πá‡∏ô HTML <b> tag
    menu = menu.replace("**", "<b>", 1).replace("**", "</b>", 1)
    menu = menu.replace("*", "<b>", 1).replace("*", "</b>", 1)
    return menu

# --- Custom CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢ ---
st.markdown("""
<style>
@import url('https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;600&display=swap');
body {
    font-family: 'Kanit', sans-serif;
    background-color: #f8f9fa;
    margin: 0;
    padding: 0;
}
.header {
    background-color: #ffffff;
    padding: 20px;
    border-bottom: 2px solid #dee2e6;
    text-align: center;
    margin-bottom: 20px;
}
.header h1 {
    font-size: 3rem;
    margin: 0;
    color: #343a40;
}
.visitor-info {
    font-size: 1.2rem;
    color: #666;
}
.card {
    background-color: #ffffff;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 2px 6px rgba(0,0,0,0.1);
}
.menu-column {
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
    background-color: #ffffff;
    box-shadow: 0 2px 6px rgba(0,0,0,0.1);
    transition: transform 0.3s ease;
}
.menu-column:hover {
    transform: translateY(-5px);
}
.menu-column h4 {
    color: #28a745;
}
.button-primary {
    background-color: #28a745;
    color: #fff;
    border: none;
    border-radius: 25px;
    padding: 12px 28px;
    font-size: 1.2rem;
    cursor: pointer;
    transition: all 0.3s ease;
}
.button-primary:hover {
    background-color: #218838;
}
</style>
""", unsafe_allow_html=True)

# --- Update Visitor Count ‡πÅ‡∏•‡∏∞ Active Users ---
visitor_count = increment_visitor_count()
update_active_user()
active_users = get_active_users()

# --- Header Section ---
st.markdown(f"""
<div class="header">
    <h1>üçΩÔ∏è Smart Cooking App üòé</h1>
    <p class="visitor-info">Page Views: {visitor_count} | Active Users: {active_users}</p>
</div>
""", unsafe_allow_html=True)

# --- ‡∏™‡∏£‡πâ‡∏≤‡∏á Tab ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏´‡∏°‡∏î ---
tabs = st.tabs(["üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "üìú ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤"])

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ---
def create_menu_mode():
    st.subheader("‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏≥‡πÄ‡∏≠‡∏á")
    
    with st.expander("üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏´‡∏•‡∏±‡∏Å", expanded=True):
        ingredients = st.text_area("‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏´‡∏•‡∏±‡∏Å (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ):",
                                   placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏Ç‡πà, ‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö, ‡∏ú‡∏±‡∏Å‡∏Å‡∏≤‡∏î...",
                                   height=120)
    with st.expander("‚öôÔ∏è ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π", expanded=True):
        col1, col2 = st.columns(2)
        with col1:
            category = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
                                    ["‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", "‡∏°‡∏±‡∏á‡∏™‡∏ß‡∏¥‡∏£‡∏±‡∏ï‡∏¥", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ñ‡∏•‡∏µ‡∏ô", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô",
                                     "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏µ‡∏ô", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏¥‡∏ô‡πÄ‡∏î‡∏µ‡∏¢", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ß‡∏µ‡∏¢‡∏î‡∏ô‡∏≤‡∏°", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ",
                                     "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏°‡πá‡∏Å‡∏ã‡∏¥‡∏Å‡∏±‡∏ô", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏¥‡∏ï‡∏≤‡πÄ‡∏•‡∏µ‡∏¢‡∏ô", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ü‡∏≤‡∏™‡∏ï‡πå‡∏ü‡∏π‡πâ‡∏î", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•",
                                     "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏à", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏µ‡∏™‡∏≤‡∏ô", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ï‡πâ", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏´‡∏ô‡∏∑‡∏≠", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ü‡∏¥‡∏ß‡∏ä‡∏±‡πà‡∏ô", "‡∏Ç‡∏ô‡∏°", "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°"])
            calories = st.slider("‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (kcal)", 100, 1500, 500, step=50)
        with col2:
            difficulty = st.radio("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å", ["‡∏á‡πà‡∏≤‡∏¢", "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏¢‡∏≤‡∏Å", "‡∏¢‡∏≤‡∏Å‡∏°‡∏≤‡∏Å", "‡∏ô‡∏£‡∏Å"], horizontal=True)
            cook_time = st.slider("‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (‡∏ô‡∏≤‡∏ó‡∏µ)", 5, 180, 30, step=5)
    
    if st.button("üç≥ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π", key="create_menu"):
        if ingredients.strip():
            prompt = (f"‡∏â‡∏±‡∏ô‡∏°‡∏µ: {ingredients} ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏´‡∏•‡∏±‡∏Å "
                      f"‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π {category} ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô {cook_time} ‡∏ô‡∏≤‡∏ó‡∏µ "
                      f"‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {calories} kcal ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å {difficulty} "
                      f"‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÄ‡∏™‡∏ô‡∏≠ 3 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 'üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà' "
                      f"‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡∏£‡∏¥‡πà‡∏ô‡∏ô‡∏≥ ‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏≤‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢ ‡πÅ‡∏•‡∏∞‡∏ö‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏≠‡∏£‡πà‡∏≠‡∏¢‡πÜ..."):
                menu_list = process_menus(call_gemini_api(prompt))
            if menu_list:
                st.markdown("<h3>üßë‚Äçüç≥ ‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 3 ‡πÄ‡∏°‡∏ô‡∏π:</h3>", unsafe_allow_html=True)
                cols = st.columns(3)
                for i, menu in enumerate(menu_list[:3]):
                    with cols[i]:
                        menu = format_menu_text(menu)
                        st.markdown(f"""
                        <div class="menu-column">
                            <h4>üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà {i+1}</h4>
                            <p>{menu}</p>
                        </div>
                        """, unsafe_allow_html=True)
            else:
                st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
        else:
            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ---
def search_menu_mode():
    st.subheader("‚ú® ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏ä‡∏≠‡∏ö")
    
    with st.expander("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", expanded=True):
        col1, col2 = st.columns(2)
        with col1:
            country = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ",
                                   ["‡πÑ‡∏ó‡∏¢", "‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô", "‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ‡πÉ‡∏ï‡πâ", "‡∏™‡∏´‡∏£‡∏±‡∏ê‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤", "‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©", "‡∏ù‡∏£‡∏±‡πà‡∏á‡πÄ‡∏®‡∏™",
                                    "‡πÄ‡∏¢‡∏≠‡∏£‡∏°‡∏ô‡∏µ", "‡∏à‡∏µ‡∏ô", "‡∏≠‡∏¥‡∏ô‡πÄ‡∏î‡∏µ‡∏¢", "‡∏£‡∏±‡∏™‡πÄ‡∏ã‡∏µ‡∏¢", "‡πÅ‡∏Ñ‡∏ô‡∏≤‡∏î‡∏≤", "‡∏ö‡∏£‡∏≤‡∏ã‡∏¥‡∏•", "‡∏≠‡∏≠‡∏™‡πÄ‡∏ï‡∏£‡πÄ‡∏•‡∏µ‡∏¢"])
            category = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
                                    ["‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ", "‡∏ü‡∏≤‡∏™‡∏ï‡πå‡∏ü‡∏π‡πâ‡∏î", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
                                     "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏µ‡∏ô", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏¥‡∏ô‡πÄ‡∏î‡∏µ‡∏¢", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ß‡∏µ‡∏¢‡∏î‡∏ô‡∏≤‡∏°", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏°‡πá‡∏Å‡∏ã‡∏¥‡∏Å‡∏±‡∏ô",
                                     "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏¥‡∏ï‡∏≤‡πÄ‡∏•‡∏µ‡∏¢‡∏ô", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏à", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏µ‡∏™‡∏≤‡∏ô", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ï‡πâ",
                                     "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏´‡∏ô‡∏∑‡∏≠", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ü‡∏¥‡∏ß‡∏ä‡∏±‡πà‡∏ô", "‡∏Ç‡∏ô‡∏°", "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å"])
        with col2:
            taste = st.radio("‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥", ["‡πÄ‡∏ú‡πá‡∏î", "‡∏´‡∏ß‡∏≤‡∏ô", "‡πÄ‡∏Ñ‡πá‡∏°", "‡πÄ‡∏õ‡∏£‡∏µ‡πâ‡∏¢‡∏ß", "‡∏Ç‡∏°", "‡∏≠‡∏π‡∏°‡∏≤‡∏°‡∏¥", "‡∏°‡∏±‡∏ô", "‡∏ù‡∏≤‡∏î", "‡∏à‡∏∑‡∏î", "‡∏£‡∏™‡∏à‡∏±‡∏î", "‡∏Å‡∏•‡∏°‡∏Å‡∏•‡πà‡∏≠‡∏°", "‡∏Å‡∏•‡∏≤‡∏á‡πÜ"], horizontal=True)
            budget = st.radio("‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", ["‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 100 ‡∏ö‡∏≤‡∏ó", "100 - 300 ‡∏ö‡∏≤‡∏ó", "300 - 1000 ‡∏ö‡∏≤‡∏ó", "1000 - 10000 ‡∏ö‡∏≤‡∏ó", "‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏á‡∏ö(‡∏£‡∏∞‡∏î‡∏±‡∏ö MrBeast)"], horizontal=True)
    
    if st.button("üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π", key="search_menu"):
        if budget == "‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏á‡∏ö(‡∏£‡∏∞‡∏î‡∏±‡∏ö MrBeast)":
            prompt = (f"‡∏â‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£ {category} ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥ {taste} ‡∏£‡∏≤‡∏Ñ‡∏≤ 10000 - 10000000 ‡∏ö‡∏≤‡∏ó {budget} "
                      f"‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô {country} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 3 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π {category} ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô {country} "
                      f"‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 'üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà' ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡∏£‡∏¥‡πà‡∏ô‡∏ô‡∏≥ ‡∏ö‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ ‡πÅ‡∏•‡∏∞‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏´‡∏ô")
        else:
            prompt = (f"‡∏â‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£ {category} ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥ {taste} ‡∏£‡∏≤‡∏Ñ‡∏≤ {budget} "
                      f"‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô {country} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 3 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π {category} ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô {country} "
                      f"‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 'üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà' ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡∏£‡∏¥‡πà‡∏ô‡∏ô‡∏≥ ‡∏ö‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ ‡πÅ‡∏•‡∏∞‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏´‡∏ô")
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î..."):
            menu_list = process_menus(call_gemini_api(prompt))
        if menu_list:
            st.markdown("<h3>üßë‚Äçüç≥ ‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 3 ‡πÄ‡∏°‡∏ô‡∏π:</h3>", unsafe_allow_html=True)
            cols = st.columns(3)
            for i, menu in enumerate(menu_list[:3]):
                with cols[i]:
                    menu = format_menu_text(menu)
                    st.markdown(f"""
                    <div class="menu-column">
                        <h4>üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà {i+1}</h4>
                        <p>{menu}</p>
                    </div>
                    """, unsafe_allow_html=True)
        else:
            st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")

# --- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏´‡∏°‡∏î‡πÉ‡∏ô Tab ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ---
with tabs[0]:
    create_menu_mode()
with tabs[1]:
    search_menu_mode()
with tabs[2]:
    st.subheader("ü§ù ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤")
    st.markdown("""
    <div class="card">
        <h4>‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏û‡∏±‡∏í‡∏ô‡∏≤</h4>
        <ul>
            <li><b>‡∏ô‡∏≤‡∏¢ ‡∏Å‡∏±‡∏•‡∏õ‡∏û‡∏§‡∏Å‡∏©‡πå ‡∏ß‡∏¥‡πÄ‡∏ä‡∏µ‡∏¢‡∏£‡∏£‡∏±‡∏ï‡∏ô‡πå</b> (‡∏Ñ‡∏ô‡πÅ‡∏ö‡∏Å‡∏≠‡∏¥‡πÜ‡πÜ üòé)</li>
            <li><b>‡∏ô‡∏≤‡∏¢ ‡∏ò‡∏µ‡∏£‡∏≤‡∏ò‡∏£ ‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡πÄ‡∏û‡∏ä‡∏£‡∏£‡∏±‡∏ï‡∏ô‡πå</b> (‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ No.1)</li>
            <li><b>‡∏ô‡∏≤‡∏¢ ‡∏≠‡∏†‡∏¥‡∏ß‡∏¥‡∏ä‡∏ç‡πå ‡∏≠‡∏î‡∏∏‡∏•‡∏ò‡∏£‡∏£‡∏°‡∏ß‡∏¥‡∏ó‡∏¢‡πå</b> (‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ No.2)</li>
            <li><b>‡∏ô‡∏≤‡∏¢ ‡∏õ‡∏±‡∏ì‡∏ì‡∏ß‡∏¥‡∏ä‡∏ç‡πå ‡∏´‡∏•‡∏µ‡∏Å‡∏†‡∏±‡∏¢</b></li>
        </ul>
    </div>
    """, unsafe_allow_html=True)

# --- Admin Panel ‡πÉ‡∏ô Sidebar ---
with st.sidebar:
    st.markdown("### üîß Admin Panel")
    admin_password = st.text_input("Enter Admin Password:", type="password")
    if admin_password == st.secrets["ADMIN_PASSWORD"]:
        if st.button("Reset Visitor Count and Active Users"):
            with open(COUNTER_FILE, "w") as f:
                f.write("0")
            with open(ACTIVE_USERS_FILE, "w") as f:
                f.truncate(0)
            st.success("Visitor count and active users reset to 0.")
            st.experimental_rerun()
        
        st.markdown("#### üìÇ View Stored Data")
        def read_file_content(file_path):
            try:
                with open(file_path, "r") as f:
                    content = f.read().strip()
                    return content if content else "(Empty File)"
            except FileNotFoundError:
                return "(File Not Found)"
        if st.button("View Visitor Count File"):
            st.text_area("Visitor Count File Content:", read_file_content(COUNTER_FILE), height=70)
        if st.button("View Active Users File"):
            st.text_area("Active Users File Content:", read_file_content(ACTIVE_USERS_FILE), height=100)
    else:
        if admin_password != "":
            st.warning("Incorrect password or unauthorized access.")
